.. _project_setup:

Create a Project
================

Now that you have the server up and running, this guide will help you get
started with additional steps which will enable translations on the Pootle
server.


Assumptions
-----------

- You are setting up a project which consists of PO files which can be 
copied to the same server which is running Pootle.
- You have a template file in POT which contains the strings 
which need to be translated. 
- The files are using the GNU layout. Additional information on this layout
format will be discussed in a later section. 
- Pootle is correctly set up and running.
- There is at least one **rqworker** thread running. This is important.
- You are logged into the Pootle instance 
using your newly created administrator user.


.. _project_setup#add-new-project:

Adding a new project
--------------------


.. _project_setup#place-translation-files:

Place translation files
+++++++++++++++++++++++

The first task is to place the translation files for your new project in a location
where Pootle can find, write and read them. Pootle is told about this location
by using the :setting:`POOTLE_TRANSLATION_DIRECTORY` setting.

.. note: You probably would like to set a different value for
   :setting:`POOTLE_TRANSLATION_DIRECTORY` in the custom settings file
   generated by the :djadmin:`init` command. By default it is the
   :file:`translations` directory within Pootle codebase, which might be
   difficult for you to find depending on how you installed Pootle.


As described  in the section above, for this example we will use a GNU layout. 
A GNU layoutmeans that a given project contains only translation files 
named by its language code. That means that within that 
project there are no directories, just files. 
This is the simplest layout possible. Below you can see an examplewith two
projects using the GNU layout:

::

    `-- translations
        `-- project1
        |   |-- de.po
        |   |-- fr.po
        |   |-- gl.po
        |   |-- pt_BR.po
        |   `-- templates.pot
        `-- project2
            |-- af.po
            |-- eu.po
            |-- pt_BR.po
            |-- templates.pot
            `-- zu.po


You might have noticed that among the regular translation files there are two
files named :file:`templates.pot`. These are the master (template) files 
that contain the original strings. Usually these master files contain English
strings, but we find much less confusing to use ``templates`` 
instead of ``en`` (language code for English). It is also possible to provide
a descriptive name for the template, such as `project1.pot`. 

To get started, create a :file:`my-project` directory in the 
location pointed to by :setting:`POOTLE_TRANSLATION_DIRECTORY` and place
within it the translation files for your new project. Make sure you 
have a :file:`templates.pot` among those project translation files.


.. _project_setup#create-new-project:

Creating the project
++++++++++++++++++++

At the top of the user interface, you should see your newly created
administrator username. Click on it and the main top menu will be displayed,
and then click on **Admin** item (highlighted in red):

.. image:: ../_static/accessing_admin_interface.png


Now you are in the administration interface. Within the **Projects** tab you
will see a **New Project** button:

.. image:: ../_static/add_project_button.png


Click on that button and the **Add Project** form will be presented to you.
Fill it with the new project details. **Code** must match the name of the
directory within :setting:`POOTLE_TRANSLATION_DIRECTORY` that contains the new
project translation files, in our example :file:`my-project`. You can also
provide a **Full Name** easily readable for humans. You don't need to change
the rest of the fields unless you need to further customize your project.

.. image:: ../_static/add_project_form.png


Once you filled in all information in this screen, click on the **Save** button 
below the form to create theproject. Creating the project doesn't actually
import all the translations to Pootle, so you also need to execute the command
:djadmin:`update_stores`: on the command line of the Pootle server.

.. code-block:: console

    $ pootle update_stores --project=my-project


This will import all the translations from disk into Pootle, calculate the
translation statistics and calculate the quality check failures. This might
take a while if your project is large.


.. _project_setup#initialize-new-tp:

Enable translation to a new language
------------------------------------

Your main reason for using Pootle probably is to get something translated to as
many languages as possible in a simple way. So you will usually be enabling the
translation to new languages in your project.

To enable translating your project to a new language, go to your project
overview. Then select the **Languages** item in the navigation dropdown and
click on it:

.. image:: ../_static/languages_in_project_dropdown.png


.. note:: Alternatively you can get the same result by clicking on the
   **Languages** link that is displayed below your project form in the
   administration interface:

   .. image:: ../_static/project_form_bottom_links.png


You are presented with a form listing all the existing languages. Here you can
add a new language. In this example the **Arabic** language is selected to be
enabled for the selected project:

.. image:: ../_static/enable_new_tp_through_admin_UI.png


After you click on the **Save** button, the new language will be enabled for
translation. In large projects, it might take a bit to create the new
translation files on disk and initialize the translations from the
**Templates** language.

.. note:: If you want to enable translation to a language that doesn't yet
   exist in your Pootle instance, then you will have to first add the language
   in the **Languages** tab in the administration interface, in a similar way
   to :ref:`creating a new project <project_setup#create-new-project>`.

   Then you can enable translation to that new language in any project by
   following the instructions above.


.. _project_setup#update-strings:

Update strings for existing project
-----------------------------------

Often times, changes to language templates will be made in the software  or
project which you are translating in Pootle. Developers may introduce new 
strings or deprecate older ones. When this situation occurs, you will need
to generate a new :file:`templates.pot` whenever there have been any changes 
to the messages contained in the template file. After that, all of the 
translation files on diskwill need to be updated, to bring the translations 
into syncwith the templates, ensuring that new messages have been added, and 
to remove  messages have been deprecated from the translation files. 
Lastly, the Pootle translation database will need to be brought into sync with 
the files located on the disk. We describe this process in the following steps.

First, you will need to ensure that your updated template file has been
placed into the :setting:`POOTLE_TRANSLATION_DIRECTORY`.  
Once you have recieved or generated the new :file:`templates.pot`
place that file within your project's directory in
:setting:`POOTLE_TRANSLATION_DIRECTORY`, replacing the file with the same name.
After that, invoke the following command which will update the template 
translations in the Pootle database.

.. code-block:: console

    $ pootle update_stores --project=my-project --language=templates


This command will ensure that new strings are added to the project and any
strings which have been removed from the templates are marked as deprecated, and
thus will not be available for translation. 

After the template language has been updated, each of the translation files 
will need to be brought into sync with the template. The first step is to
save to disk all the translations for the project that currently are in Pootle
database:

.. code-block:: console

    $ pootle sync_stores --project=my-project


Once the translations on disk have been brought into sync with the database, we
recommend you to update them using the :ref:`pot2po <toolkit:pot2po>`
command line tool, which can handle other formats besides Gettext PO. Please
refer to this commands documentation for details on how to use this command.

.. code-block:: console

    $ cd POOTLE_TRANSLATION_DIRECTORY  # Use the actual path!
    $ cd my-project
    $ pot2po -t af.po -i templates.pot -o af.po  # Repeat for each language, changing the language code!


.. note:: Please note that for updating against templates the previous
   translations file for the language must be passed to ``-t`` and the newer
   templates file must be passed to ``-i``.


Once that all the languages in the project are synchronized with the newer
templates you can then proceed to syncronize these with the Pootle database
using the :djadmin:`update_stores` command.

.. code-block:: console

    $ pootle update_stores --project=my-project


.. note:: If your languages contain many translations you wish to perform
   the update against newer templates  on a language by language basis.
